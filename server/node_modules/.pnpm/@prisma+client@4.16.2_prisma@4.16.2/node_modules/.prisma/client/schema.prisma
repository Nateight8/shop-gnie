// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Tournament {
  id                   Int      @id @default(autoincrement())
  name                 String
  game                 String // PES or COD Mobile
  startDate            DateTime
  endDate              DateTime
  format               String // Tournament format (e.g., single-elimination, round-robin)
  rules                String // Tournament rules and regulations
  entryFee             Float? // Optional field for entry fee
  maxParticipants      Int // Maximum number of participants or teams
  registrationDeadline DateTime
  isPublic             Boolean // Indicates whether the tournament is public or private
  image                String

  // Relationship: Tournament has many Participants (teams or individual players) ****will be added
  // participants Participant[]

  // Relationship: Tournament has many Matches ****will be added
  // matches Match[]
}

model Post {
  id       String @id @default(cuid())
  title    String
  username String
}

// model Participant {
//   id   Int    @id @default(autoincrement())
//   name String
//   // Other participant-specific fields (e.g., team details, player information)

//   // Relationship: Participant belongs to a Tournament
//   tournament   Tournament @relation(fields: [tournamentId], references: [id])
//   tournamentId Int

//   // Relationship: Participant has many Matches as participantA
//   matchesA Match[] @relation("MatchParticipantA")

//   // Relationship: Participant has many Matches as participantB
//   matchesB Match[] @relation("MatchParticipantB")
// }

// model Match {
//   id        Int      @id @default(autoincrement())
//   startDate DateTime
//   endDate   DateTime
//   // Other match-specific fields (e.g., match duration, result, status)

//   // Relationship: Match belongs to a Tournament
//   tournament   Tournament @relation(fields: [tournamentId], references: [id])
//   tournamentId Int

//   // Relationship: Match has one Participant as participantA
//   participantA   Participant @relation("MatchParticipantA", fields: [participantAId], references: [id])
//   participantAId Int

//   // Relationship: Match has one Participant as participantB
//   participantB   Participant @relation("MatchParticipantB", fields: [participantBId], references: [id])
//   participantBId Int
// }
